generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Product {
    id               Int            @id @default(autoincrement())
    name             String
    price            Float
    sizes            ProductSize[]
    OrderItems       OrderItem[]
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    images           ProductImage[]
    CartItem         CartItem[]
    categoryId       Int
    category         Category       @relation(fields: [categoryId], references: [id])
    targetAudienceId Int
    targetAudience   TargetAudience @relation(fields: [targetAudienceId], references: [id])
}

model ProductImage {
    id        Int     @id @default(autoincrement())
    url       String
    productId Int
    product   Product @relation(fields: [productId], references: [id])
    altText   String?
}

model Category {
    id         Int            @id @default(autoincrement())
    name       String
    products   Product[]
    audienceId Int
    audience   TargetAudience @relation(fields: [audienceId], references: [id])
}

model TargetAudience {
    id         Int        @id @default(autoincrement())
    name       String
    products   Product[]
    categories Category[]
}

model ProductSize {
    id        Int     @id @default(autoincrement())
    name      String
    productId Int
    product   Product @relation(fields: [productId], references: [id])
}

model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    password  String
    orders    Order[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Cart      Cart[]
}

model Order {
    id        Int         @id @default(autoincrement())
    total     Float
    user      User        @relation(fields: [userId], references: [id])
    userId    Int
    items     OrderItem[]
    status    String
    paymentId Int         @unique
    payment   Payment?    @relation(fields: [paymentId], references: [id])
    createdAt DateTime    @default(now())
}

model OrderItem {
    id        Int     @id @default(autoincrement())
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    order     Order   @relation(fields: [orderId], references: [id])
    orderId   Int
    quantity  Int
    price     Float
}

model Payment {
    id        Int      @id @default(autoincrement())
    orderId   Int
    order     Order?
    method    String
    status    String
    amount    Float
    createdAt DateTime @default(now())
}

model Cart {
    id        Int        @id @default(autoincrement())
    token     String?    @unique
    items     CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    userId    Int
    user      User       @relation(fields: [userId], references: [id])
}

model CartItem {
    id        Int      @id @default(autoincrement())
    quantity  Int      @default(1)
    createdAt DateTime @default(now())
    productId Int
    cartId    Int
    product   Product  @relation(fields: [productId], references: [id])
    cart      Cart     @relation(fields: [cartId], references: [id])
}
